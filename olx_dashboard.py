
# olx_dashboard.py

"""
Instru√ß√µes:

1. Instala os pacotes necess√°rios (idealmente num ambiente virtual):
   pip install requests beautifulsoup4 pandas streamlit

2. Corre o dashboard com:
   streamlit run olx_dashboard.py
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import streamlit as st
import re

# Fun√ß√£o para extrair o valor num√©rico do pre√ßo
def extrair_preco(texto):
    preco = re.findall(r'\d+', texto.replace('.', ''))
    return int(''.join(preco)) if preco else None

# Fun√ß√£o para extrair dados de N p√°ginas do OLX
def extrair_anuncios_olx(paginas=3):
    anuncios = []
    for pagina in range(1, paginas + 1):
        url = f"https://www.olx.pt/carros/q-vw-golf-vii/?page={pagina}"
        resposta = requests.get(url)
        sopa = BeautifulSoup(resposta.text, 'html.parser')
        blocos = sopa.find_all('div', class_='css-1sw7q4x')  # Pode precisar de atualiza√ß√£o futura

        for bloco in blocos:
            titulo_tag = bloco.find('h6')
            preco_tag = bloco.find('p', class_='css-10b0gli')
            link_tag = bloco.find('a', href=True)

            if titulo_tag and preco_tag and link_tag:
                titulo = titulo_tag.text.strip()
                preco = extrair_preco(preco_tag.text.strip())
                link = "https://www.olx.pt" + link_tag["href"]

                anuncios.append({
                    "T√≠tulo": titulo,
                    "Pre√ßo (‚Ç¨)": preco,
                    "Link": link
                })

    return pd.DataFrame(anuncios)

# Construir a interface do Streamlit
st.set_page_config(page_title="An√°lise OLX - VW Golf VII", layout="wide")
st.title("üîç An√°lise de VW Golf VII no OLX")
st.markdown("Este dashboard identifica poss√≠veis oportunidades de neg√≥cio com base nos an√∫ncios mais recentes.")

# Par√¢metro: n√∫mero de p√°ginas a explorar
num_paginas = st.slider("Quantas p√°ginas OLX queres analisar?", 1, 10, 3)

# Bot√£o para atualizar
if st.button("üîÑ Atualizar An√∫ncios"):
    df = extrair_anuncios_olx(paginas=num_paginas)

    if not df.empty:
        preco_medio = df["Pre√ßo (‚Ç¨)"].mean()
        preco_min = df["Pre√ßo (‚Ç¨)"].min()
        preco_max = df["Pre√ßo (‚Ç¨)"].max()

        st.subheader("üìä Estat√≠sticas de Pre√ßo")
        st.metric("Pre√ßo M√©dio", f"{preco_medio:,.0f} ‚Ç¨")
        st.metric("Mais Barato", f"{preco_min:,.0f} ‚Ç¨")
        st.metric("Mais Caro", f"{preco_max:,.0f} ‚Ç¨")

        st.subheader("üìã An√∫ncios")
        st.dataframe(df)

        st.subheader("üí° Oportunidades abaixo da m√©dia")
        oportunidades = df[df["Pre√ßo (‚Ç¨)"] < preco_medio * 0.9]
        st.dataframe(oportunidades if not oportunidades.empty else pd.DataFrame([{"Mensagem": "Sem oportunidades abaixo da m√©dia."}]))
    else:
        st.warning("N√£o foi poss√≠vel obter dados. Tenta novamente mais tarde.")
else:
    st.info("Clica em 'Atualizar An√∫ncios' para iniciar a an√°lise.")
